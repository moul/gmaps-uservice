// Code generated by protoc-gen-gogo.
// source: gmaps.proto
// DO NOT EDIT!

/*
Package gmapspb is a generated protocol buffer package.

It is generated from these files:
	gmaps.proto

It has these top-level messages:
	DirectionsRequest
	DirectionsResponse
	GeocodedWaypoint
	TransitDetails
	TransitLine
	TransitLineVehicle
	TransitAgency
	TransitStop
	Route
	LatLngBounds
	LatLng
	Polyline
	Fare
	Leg
	Distance
	Step
*/
package gmapspb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DirectionsRequest struct {
	Origin                   string   `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Destination              string   `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	Mode                     string   `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty"`
	DepartureTime            string   `protobuf:"bytes,4,opt,name=departure_time,json=departureTime,proto3" json:"departure_time,omitempty"`
	ArrivalTime              string   `protobuf:"bytes,5,opt,name=arrival_time,json=arrivalTime,proto3" json:"arrival_time,omitempty"`
	Waypoints                []string `protobuf:"bytes,6,rep,name=waypoints" json:"waypoints,omitempty"`
	Alternatives             bool     `protobuf:"varint,7,opt,name=alternatives,proto3" json:"alternatives,omitempty"`
	Avoid                    []string `protobuf:"bytes,8,rep,name=avoid" json:"avoid,omitempty"`
	Language                 string   `protobuf:"bytes,9,opt,name=language,proto3" json:"language,omitempty"`
	Units                    string   `protobuf:"bytes,10,opt,name=units,proto3" json:"units,omitempty"`
	Region                   string   `protobuf:"bytes,11,opt,name=region,proto3" json:"region,omitempty"`
	TransitMode              []string `protobuf:"bytes,12,rep,name=transit_mode,json=transitMode" json:"transit_mode,omitempty"`
	TransitRoutingPreference string   `protobuf:"bytes,13,opt,name=transit_routing_preference,json=transitRoutingPreference,proto3" json:"transit_routing_preference,omitempty"`
	TrafficModel             string   `protobuf:"bytes,14,opt,name=traffic_model,json=trafficModel,proto3" json:"traffic_model,omitempty"`
}

func (m *DirectionsRequest) Reset()                    { *m = DirectionsRequest{} }
func (m *DirectionsRequest) String() string            { return proto.CompactTextString(m) }
func (*DirectionsRequest) ProtoMessage()               {}
func (*DirectionsRequest) Descriptor() ([]byte, []int) { return fileDescriptorGmaps, []int{0} }

func (m *DirectionsRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *DirectionsRequest) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *DirectionsRequest) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *DirectionsRequest) GetDepartureTime() string {
	if m != nil {
		return m.DepartureTime
	}
	return ""
}

func (m *DirectionsRequest) GetArrivalTime() string {
	if m != nil {
		return m.ArrivalTime
	}
	return ""
}

func (m *DirectionsRequest) GetWaypoints() []string {
	if m != nil {
		return m.Waypoints
	}
	return nil
}

func (m *DirectionsRequest) GetAlternatives() bool {
	if m != nil {
		return m.Alternatives
	}
	return false
}

func (m *DirectionsRequest) GetAvoid() []string {
	if m != nil {
		return m.Avoid
	}
	return nil
}

func (m *DirectionsRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *DirectionsRequest) GetUnits() string {
	if m != nil {
		return m.Units
	}
	return ""
}

func (m *DirectionsRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *DirectionsRequest) GetTransitMode() []string {
	if m != nil {
		return m.TransitMode
	}
	return nil
}

func (m *DirectionsRequest) GetTransitRoutingPreference() string {
	if m != nil {
		return m.TransitRoutingPreference
	}
	return ""
}

func (m *DirectionsRequest) GetTrafficModel() string {
	if m != nil {
		return m.TrafficModel
	}
	return ""
}

type DirectionsResponse struct {
	Routes           []*Route            `protobuf:"bytes,1,rep,name=routes" json:"routes,omitempty"`
	GeocodedWaypoint []*GeocodedWaypoint `protobuf:"bytes,2,rep,name=geocoded_waypoint,json=geocodedWaypoint" json:"geocoded_waypoint,omitempty"`
	ErrMsg           string              `protobuf:"bytes,3,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
}

func (m *DirectionsResponse) Reset()                    { *m = DirectionsResponse{} }
func (m *DirectionsResponse) String() string            { return proto.CompactTextString(m) }
func (*DirectionsResponse) ProtoMessage()               {}
func (*DirectionsResponse) Descriptor() ([]byte, []int) { return fileDescriptorGmaps, []int{1} }

func (m *DirectionsResponse) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *DirectionsResponse) GetGeocodedWaypoint() []*GeocodedWaypoint {
	if m != nil {
		return m.GeocodedWaypoint
	}
	return nil
}

func (m *DirectionsResponse) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type GeocodedWaypoint struct {
	GeocoderStatus string   `protobuf:"bytes,1,opt,name=geocoder_status,json=geocoderStatus,proto3" json:"geocoder_status,omitempty"`
	PartialMatch   bool     `protobuf:"varint,2,opt,name=partial_match,json=partialMatch,proto3" json:"partial_match,omitempty"`
	PlaceId        string   `protobuf:"bytes,3,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
	Types          []string `protobuf:"bytes,4,rep,name=types" json:"types,omitempty"`
}

func (m *GeocodedWaypoint) Reset()                    { *m = GeocodedWaypoint{} }
func (m *GeocodedWaypoint) String() string            { return proto.CompactTextString(m) }
func (*GeocodedWaypoint) ProtoMessage()               {}
func (*GeocodedWaypoint) Descriptor() ([]byte, []int) { return fileDescriptorGmaps, []int{2} }

func (m *GeocodedWaypoint) GetGeocoderStatus() string {
	if m != nil {
		return m.GeocoderStatus
	}
	return ""
}

func (m *GeocodedWaypoint) GetPartialMatch() bool {
	if m != nil {
		return m.PartialMatch
	}
	return false
}

func (m *GeocodedWaypoint) GetPlaceId() string {
	if m != nil {
		return m.PlaceId
	}
	return ""
}

func (m *GeocodedWaypoint) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

type TransitDetails struct {
	ArrivalStop   *TransitStop `protobuf:"bytes,1,opt,name=arrival_stop,json=arrivalStop" json:"arrival_stop,omitempty"`
	DepartureStop *TransitStop `protobuf:"bytes,2,opt,name=departure_stop,json=departureStop" json:"departure_stop,omitempty"`
	ArrivalTime   int64        `protobuf:"varint,3,opt,name=arrival_time,json=arrivalTime,proto3" json:"arrival_time,omitempty"`
	DepartureTime int64        `protobuf:"varint,4,opt,name=departure_time,json=departureTime,proto3" json:"departure_time,omitempty"`
	Headsign      string       `protobuf:"bytes,5,opt,name=headsign,proto3" json:"headsign,omitempty"`
	Headway       int64        `protobuf:"varint,6,opt,name=headway,proto3" json:"headway,omitempty"`
	NumStop       uint32       `protobuf:"varint,7,opt,name=num_stop,json=numStop,proto3" json:"num_stop,omitempty"`
	Line          *TransitLine `protobuf:"bytes,8,opt,name=line" json:"line,omitempty"`
}

func (m *TransitDetails) Reset()                    { *m = TransitDetails{} }
func (m *TransitDetails) String() string            { return proto.CompactTextString(m) }
func (*TransitDetails) ProtoMessage()               {}
func (*TransitDetails) Descriptor() ([]byte, []int) { return fileDescriptorGmaps, []int{3} }

func (m *TransitDetails) GetArrivalStop() *TransitStop {
	if m != nil {
		return m.ArrivalStop
	}
	return nil
}

func (m *TransitDetails) GetDepartureStop() *TransitStop {
	if m != nil {
		return m.DepartureStop
	}
	return nil
}

func (m *TransitDetails) GetArrivalTime() int64 {
	if m != nil {
		return m.ArrivalTime
	}
	return 0
}

func (m *TransitDetails) GetDepartureTime() int64 {
	if m != nil {
		return m.DepartureTime
	}
	return 0
}

func (m *TransitDetails) GetHeadsign() string {
	if m != nil {
		return m.Headsign
	}
	return ""
}

func (m *TransitDetails) GetHeadway() int64 {
	if m != nil {
		return m.Headway
	}
	return 0
}

func (m *TransitDetails) GetNumStop() uint32 {
	if m != nil {
		return m.NumStop
	}
	return 0
}

func (m *TransitDetails) GetLine() *TransitLine {
	if m != nil {
		return m.Line
	}
	return nil
}

type TransitLine struct {
	Name      string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ShortName string              `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Color     string              `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	Agencies  []*TransitAgency    `protobuf:"bytes,4,rep,name=agencies" json:"agencies,omitempty"`
	Url       string              `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Icon      string              `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	TextColor string              `protobuf:"bytes,7,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	Vehicle   *TransitLineVehicle `protobuf:"bytes,8,opt,name=vehicle" json:"vehicle,omitempty"`
}

func (m *TransitLine) Reset()                    { *m = TransitLine{} }
func (m *TransitLine) String() string            { return proto.CompactTextString(m) }
func (*TransitLine) ProtoMessage()               {}
func (*TransitLine) Descriptor() ([]byte, []int) { return fileDescriptorGmaps, []int{4} }

func (m *TransitLine) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TransitLine) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *TransitLine) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *TransitLine) GetAgencies() []*TransitAgency {
	if m != nil {
		return m.Agencies
	}
	return nil
}

func (m *TransitLine) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *TransitLine) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *TransitLine) GetTextColor() string {
	if m != nil {
		return m.TextColor
	}
	return ""
}

func (m *TransitLine) GetVehicle() *TransitLineVehicle {
	if m != nil {
		return m.Vehicle
	}
	return nil
}

type TransitLineVehicle struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Url  string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *TransitLineVehicle) Reset()                    { *m = TransitLineVehicle{} }
func (m *TransitLineVehicle) String() string            { return proto.CompactTextString(m) }
func (*TransitLineVehicle) ProtoMessage()               {}
func (*TransitLineVehicle) Descriptor() ([]byte, []int) { return fileDescriptorGmaps, []int{5} }

func (m *TransitLineVehicle) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TransitLineVehicle) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TransitLineVehicle) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type TransitAgency struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url   string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Phone string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (m *TransitAgency) Reset()                    { *m = TransitAgency{} }
func (m *TransitAgency) String() string            { return proto.CompactTextString(m) }
func (*TransitAgency) ProtoMessage()               {}
func (*TransitAgency) Descriptor() ([]byte, []int) { return fileDescriptorGmaps, []int{6} }

func (m *TransitAgency) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TransitAgency) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *TransitAgency) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type TransitStop struct {
	Location *LatLng `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Name     string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *TransitStop) Reset()                    { *m = TransitStop{} }
func (m *TransitStop) String() string            { return proto.CompactTextString(m) }
func (*TransitStop) ProtoMessage()               {}
func (*TransitStop) Descriptor() ([]byte, []int) { return fileDescriptorGmaps, []int{7} }

func (m *TransitStop) GetLocation() *LatLng {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *TransitStop) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Route struct {
	Summary          string        `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	Legs             []*Leg        `protobuf:"bytes,2,rep,name=legs" json:"legs,omitempty"`
	WaipointOrder    []int32       `protobuf:"varint,3,rep,packed,name=waipoint_order,json=waipointOrder" json:"waipoint_order,omitempty"`
	OverviewPolyline *Polyline     `protobuf:"bytes,4,opt,name=overview_polyline,json=overviewPolyline" json:"overview_polyline,omitempty"`
	Bounds           *LatLngBounds `protobuf:"bytes,5,opt,name=bounds" json:"bounds,omitempty"`
	Copyrights       string        `protobuf:"bytes,6,opt,name=copyrights,proto3" json:"copyrights,omitempty"`
	Warnings         []string      `protobuf:"bytes,7,rep,name=warnings" json:"warnings,omitempty"`
	Fare             *Fare         `protobuf:"bytes,8,opt,name=fare" json:"fare,omitempty"`
}

func (m *Route) Reset()                    { *m = Route{} }
func (m *Route) String() string            { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()               {}
func (*Route) Descriptor() ([]byte, []int) { return fileDescriptorGmaps, []int{8} }

func (m *Route) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *Route) GetLegs() []*Leg {
	if m != nil {
		return m.Legs
	}
	return nil
}

func (m *Route) GetWaipointOrder() []int32 {
	if m != nil {
		return m.WaipointOrder
	}
	return nil
}

func (m *Route) GetOverviewPolyline() *Polyline {
	if m != nil {
		return m.OverviewPolyline
	}
	return nil
}

func (m *Route) GetBounds() *LatLngBounds {
	if m != nil {
		return m.Bounds
	}
	return nil
}

func (m *Route) GetCopyrights() string {
	if m != nil {
		return m.Copyrights
	}
	return ""
}

func (m *Route) GetWarnings() []string {
	if m != nil {
		return m.Warnings
	}
	return nil
}

func (m *Route) GetFare() *Fare {
	if m != nil {
		return m.Fare
	}
	return nil
}

type LatLngBounds struct {
	NorthEast *LatLng `protobuf:"bytes,1,opt,name=north_east,json=northEast" json:"north_east,omitempty"`
	SouthWest *LatLng `protobuf:"bytes,2,opt,name=south_west,json=southWest" json:"south_west,omitempty"`
}

func (m *LatLngBounds) Reset()                    { *m = LatLngBounds{} }
func (m *LatLngBounds) String() string            { return proto.CompactTextString(m) }
func (*LatLngBounds) ProtoMessage()               {}
func (*LatLngBounds) Descriptor() ([]byte, []int) { return fileDescriptorGmaps, []int{9} }

func (m *LatLngBounds) GetNorthEast() *LatLng {
	if m != nil {
		return m.NorthEast
	}
	return nil
}

func (m *LatLngBounds) GetSouthWest() *LatLng {
	if m != nil {
		return m.SouthWest
	}
	return nil
}

type LatLng struct {
	Lat float32 `protobuf:"fixed32,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng float32 `protobuf:"fixed32,2,opt,name=lng,proto3" json:"lng,omitempty"`
}

func (m *LatLng) Reset()                    { *m = LatLng{} }
func (m *LatLng) String() string            { return proto.CompactTextString(m) }
func (*LatLng) ProtoMessage()               {}
func (*LatLng) Descriptor() ([]byte, []int) { return fileDescriptorGmaps, []int{10} }

func (m *LatLng) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *LatLng) GetLng() float32 {
	if m != nil {
		return m.Lng
	}
	return 0
}

type Polyline struct {
	Points string `protobuf:"bytes,1,opt,name=Points,proto3" json:"Points,omitempty"`
}

func (m *Polyline) Reset()                    { *m = Polyline{} }
func (m *Polyline) String() string            { return proto.CompactTextString(m) }
func (*Polyline) ProtoMessage()               {}
func (*Polyline) Descriptor() ([]byte, []int) { return fileDescriptorGmaps, []int{11} }

func (m *Polyline) GetPoints() string {
	if m != nil {
		return m.Points
	}
	return ""
}

type Fare struct {
	Currency string  `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	Value    float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
	Text     string  `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *Fare) Reset()                    { *m = Fare{} }
func (m *Fare) String() string            { return proto.CompactTextString(m) }
func (*Fare) ProtoMessage()               {}
func (*Fare) Descriptor() ([]byte, []int) { return fileDescriptorGmaps, []int{12} }

func (m *Fare) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Fare) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Fare) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type Leg struct {
	Steps              []*Step   `protobuf:"bytes,1,rep,name=steps" json:"steps,omitempty"`
	Distance           *Distance `protobuf:"bytes,2,opt,name=distance" json:"distance,omitempty"`
	Duration           int64     `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	DuractionInTraffic int64     `protobuf:"varint,4,opt,name=duraction_in_traffic,json=duractionInTraffic,proto3" json:"duraction_in_traffic,omitempty"`
	ArrivalTime        int64     `protobuf:"varint,5,opt,name=arrival_time,json=arrivalTime,proto3" json:"arrival_time,omitempty"`
	DepartureTime      int64     `protobuf:"varint,6,opt,name=departure_time,json=departureTime,proto3" json:"departure_time,omitempty"`
	StartLocation      *LatLng   `protobuf:"bytes,7,opt,name=start_location,json=startLocation" json:"start_location,omitempty"`
	EndLocation        *LatLng   `protobuf:"bytes,8,opt,name=end_location,json=endLocation" json:"end_location,omitempty"`
	StartAddress       string    `protobuf:"bytes,9,opt,name=start_address,json=startAddress,proto3" json:"start_address,omitempty"`
	EndAddress         string    `protobuf:"bytes,10,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (m *Leg) Reset()                    { *m = Leg{} }
func (m *Leg) String() string            { return proto.CompactTextString(m) }
func (*Leg) ProtoMessage()               {}
func (*Leg) Descriptor() ([]byte, []int) { return fileDescriptorGmaps, []int{13} }

func (m *Leg) GetSteps() []*Step {
	if m != nil {
		return m.Steps
	}
	return nil
}

func (m *Leg) GetDistance() *Distance {
	if m != nil {
		return m.Distance
	}
	return nil
}

func (m *Leg) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Leg) GetDuractionInTraffic() int64 {
	if m != nil {
		return m.DuractionInTraffic
	}
	return 0
}

func (m *Leg) GetArrivalTime() int64 {
	if m != nil {
		return m.ArrivalTime
	}
	return 0
}

func (m *Leg) GetDepartureTime() int64 {
	if m != nil {
		return m.DepartureTime
	}
	return 0
}

func (m *Leg) GetStartLocation() *LatLng {
	if m != nil {
		return m.StartLocation
	}
	return nil
}

func (m *Leg) GetEndLocation() *LatLng {
	if m != nil {
		return m.EndLocation
	}
	return nil
}

func (m *Leg) GetStartAddress() string {
	if m != nil {
		return m.StartAddress
	}
	return ""
}

func (m *Leg) GetEndAddress() string {
	if m != nil {
		return m.EndAddress
	}
	return ""
}

type Distance struct {
	HumanReadable string `protobuf:"bytes,1,opt,name=human_readable,json=humanReadable,proto3" json:"human_readable,omitempty"`
	Meters        int64  `protobuf:"varint,2,opt,name=meters,proto3" json:"meters,omitempty"`
}

func (m *Distance) Reset()                    { *m = Distance{} }
func (m *Distance) String() string            { return proto.CompactTextString(m) }
func (*Distance) ProtoMessage()               {}
func (*Distance) Descriptor() ([]byte, []int) { return fileDescriptorGmaps, []int{14} }

func (m *Distance) GetHumanReadable() string {
	if m != nil {
		return m.HumanReadable
	}
	return ""
}

func (m *Distance) GetMeters() int64 {
	if m != nil {
		return m.Meters
	}
	return 0
}

type Step struct {
	HtmlInstructions string          `protobuf:"bytes,1,opt,name=html_instructions,json=htmlInstructions,proto3" json:"html_instructions,omitempty"`
	Distance         *Distance       `protobuf:"bytes,2,opt,name=distance" json:"distance,omitempty"`
	Duration         int64           `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	StartLocation    *LatLng         `protobuf:"bytes,4,opt,name=start_location,json=startLocation" json:"start_location,omitempty"`
	EndLocation      *LatLng         `protobuf:"bytes,5,opt,name=end_location,json=endLocation" json:"end_location,omitempty"`
	Polyline         *Polyline       `protobuf:"bytes,6,opt,name=polyline" json:"polyline,omitempty"`
	Steps            []*Step         `protobuf:"bytes,7,rep,name=steps" json:"steps,omitempty"`
	TransitDetails   *TransitDetails `protobuf:"bytes,8,opt,name=transit_details,json=transitDetails" json:"transit_details,omitempty"`
	TravelMode       string          `protobuf:"bytes,9,opt,name=travel_mode,json=travelMode,proto3" json:"travel_mode,omitempty"`
}

func (m *Step) Reset()                    { *m = Step{} }
func (m *Step) String() string            { return proto.CompactTextString(m) }
func (*Step) ProtoMessage()               {}
func (*Step) Descriptor() ([]byte, []int) { return fileDescriptorGmaps, []int{15} }

func (m *Step) GetHtmlInstructions() string {
	if m != nil {
		return m.HtmlInstructions
	}
	return ""
}

func (m *Step) GetDistance() *Distance {
	if m != nil {
		return m.Distance
	}
	return nil
}

func (m *Step) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Step) GetStartLocation() *LatLng {
	if m != nil {
		return m.StartLocation
	}
	return nil
}

func (m *Step) GetEndLocation() *LatLng {
	if m != nil {
		return m.EndLocation
	}
	return nil
}

func (m *Step) GetPolyline() *Polyline {
	if m != nil {
		return m.Polyline
	}
	return nil
}

func (m *Step) GetSteps() []*Step {
	if m != nil {
		return m.Steps
	}
	return nil
}

func (m *Step) GetTransitDetails() *TransitDetails {
	if m != nil {
		return m.TransitDetails
	}
	return nil
}

func (m *Step) GetTravelMode() string {
	if m != nil {
		return m.TravelMode
	}
	return ""
}

func init() {
	proto.RegisterType((*DirectionsRequest)(nil), "gmaps.DirectionsRequest")
	proto.RegisterType((*DirectionsResponse)(nil), "gmaps.DirectionsResponse")
	proto.RegisterType((*GeocodedWaypoint)(nil), "gmaps.GeocodedWaypoint")
	proto.RegisterType((*TransitDetails)(nil), "gmaps.TransitDetails")
	proto.RegisterType((*TransitLine)(nil), "gmaps.TransitLine")
	proto.RegisterType((*TransitLineVehicle)(nil), "gmaps.TransitLineVehicle")
	proto.RegisterType((*TransitAgency)(nil), "gmaps.TransitAgency")
	proto.RegisterType((*TransitStop)(nil), "gmaps.TransitStop")
	proto.RegisterType((*Route)(nil), "gmaps.Route")
	proto.RegisterType((*LatLngBounds)(nil), "gmaps.LatLngBounds")
	proto.RegisterType((*LatLng)(nil), "gmaps.LatLng")
	proto.RegisterType((*Polyline)(nil), "gmaps.Polyline")
	proto.RegisterType((*Fare)(nil), "gmaps.Fare")
	proto.RegisterType((*Leg)(nil), "gmaps.Leg")
	proto.RegisterType((*Distance)(nil), "gmaps.Distance")
	proto.RegisterType((*Step)(nil), "gmaps.Step")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GmapsService service

type GmapsServiceClient interface {
	Directions(ctx context.Context, in *DirectionsRequest, opts ...grpc.CallOption) (*DirectionsResponse, error)
}

type gmapsServiceClient struct {
	cc *grpc.ClientConn
}

func NewGmapsServiceClient(cc *grpc.ClientConn) GmapsServiceClient {
	return &gmapsServiceClient{cc}
}

func (c *gmapsServiceClient) Directions(ctx context.Context, in *DirectionsRequest, opts ...grpc.CallOption) (*DirectionsResponse, error) {
	out := new(DirectionsResponse)
	err := grpc.Invoke(ctx, "/gmaps.GmapsService/Directions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GmapsService service

type GmapsServiceServer interface {
	Directions(context.Context, *DirectionsRequest) (*DirectionsResponse, error)
}

func RegisterGmapsServiceServer(s *grpc.Server, srv GmapsServiceServer) {
	s.RegisterService(&_GmapsService_serviceDesc, srv)
}

func _GmapsService_Directions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmapsServiceServer).Directions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gmaps.GmapsService/Directions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmapsServiceServer).Directions(ctx, req.(*DirectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GmapsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gmaps.GmapsService",
	HandlerType: (*GmapsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Directions",
			Handler:    _GmapsService_Directions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gmaps.proto",
}

func init() { proto.RegisterFile("gmaps.proto", fileDescriptorGmaps) }

var fileDescriptorGmaps = []byte{
	// 1347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x57, 0xcd, 0x6e, 0x1c, 0xc5,
	0x13, 0xff, 0x7b, 0xbf, 0xb7, 0x76, 0xd7, 0xb1, 0xfb, 0x6f, 0x92, 0x89, 0x05, 0x89, 0x33, 0xe1,
	0xc3, 0xc8, 0x51, 0x14, 0x39, 0x70, 0x40, 0x8a, 0x90, 0x92, 0x18, 0x22, 0x0b, 0x27, 0x44, 0xe3,
	0x88, 0x48, 0x5c, 0x46, 0xed, 0x9d, 0xf2, 0x6c, 0xa3, 0x99, 0x9e, 0xa1, 0xbb, 0x67, 0x1d, 0x5f,
	0x79, 0x03, 0x0e, 0x1c, 0x10, 0x2f, 0xc1, 0x4b, 0xf0, 0x04, 0xbc, 0x10, 0xaa, 0xee, 0x9e, 0xd9,
	0x5d, 0x67, 0xa3, 0x48, 0x88, 0x5b, 0xd7, 0xaf, 0xaa, 0xba, 0x3e, 0xa7, 0xba, 0x06, 0x46, 0x69,
	0xce, 0x4b, 0x7d, 0xbf, 0x54, 0x85, 0x29, 0x58, 0xd7, 0x12, 0xe1, 0xdf, 0x6d, 0xd8, 0x3e, 0x12,
	0x0a, 0xa7, 0x46, 0x14, 0x52, 0x47, 0xf8, 0x73, 0x85, 0xda, 0xb0, 0xeb, 0xd0, 0x2b, 0x94, 0x48,
	0x85, 0x0c, 0x36, 0xf6, 0x36, 0xf6, 0x87, 0x91, 0xa7, 0xd8, 0x1e, 0x8c, 0x12, 0xd4, 0x46, 0x48,
	0x4e, 0xe2, 0x41, 0xcb, 0x32, 0x97, 0x21, 0xc6, 0xa0, 0x93, 0x17, 0x09, 0x06, 0x6d, 0xcb, 0xb2,
	0x67, 0xf6, 0x09, 0x6c, 0x26, 0x58, 0x72, 0x65, 0x2a, 0x85, 0xb1, 0x11, 0x39, 0x06, 0x1d, 0xcb,
	0x9d, 0x34, 0xe8, 0x2b, 0x91, 0x23, 0xbb, 0x03, 0x63, 0xae, 0x94, 0x98, 0xf3, 0xcc, 0x09, 0x75,
	0xdd, 0xed, 0x1e, 0xb3, 0x22, 0x1f, 0xc2, 0xf0, 0x82, 0x5f, 0x96, 0x85, 0x90, 0x46, 0x07, 0xbd,
	0xbd, 0xf6, 0xfe, 0x30, 0x5a, 0x00, 0x2c, 0x84, 0x31, 0xcf, 0x0c, 0x2a, 0x72, 0x65, 0x8e, 0x3a,
	0xe8, 0xef, 0x6d, 0xec, 0x0f, 0xa2, 0x15, 0x8c, 0xed, 0x40, 0x97, 0xcf, 0x0b, 0x91, 0x04, 0x03,
	0xab, 0xed, 0x08, 0xb6, 0x0b, 0x83, 0x8c, 0xcb, 0xb4, 0xe2, 0x29, 0x06, 0x43, 0x6b, 0xb6, 0xa1,
	0x49, 0xa3, 0x92, 0xc2, 0xe8, 0x00, 0x2c, 0xc3, 0x11, 0x94, 0x21, 0x85, 0x29, 0x25, 0x61, 0xe4,
	0x32, 0xe4, 0x28, 0x0a, 0xc2, 0x28, 0x2e, 0xb5, 0x30, 0xb1, 0xcd, 0xc3, 0xd8, 0x9a, 0x19, 0x79,
	0xec, 0x39, 0xa5, 0xe3, 0x11, 0xec, 0xd6, 0x22, 0xaa, 0xa8, 0x8c, 0x90, 0x69, 0x5c, 0x2a, 0x3c,
	0x47, 0x85, 0x72, 0x8a, 0xc1, 0xc4, 0x5e, 0x17, 0x78, 0x89, 0xc8, 0x09, 0xbc, 0x6c, 0xf8, 0xec,
	0x2e, 0x4c, 0x8c, 0xe2, 0xe7, 0xe7, 0x62, 0x6a, 0x0d, 0x64, 0xc1, 0xa6, 0x55, 0x18, 0x7b, 0x90,
	0x2c, 0x64, 0xe1, 0xef, 0x1b, 0xc0, 0x96, 0xab, 0xaa, 0xcb, 0x42, 0x6a, 0x64, 0x1f, 0x43, 0x8f,
	0x2c, 0xa2, 0x0e, 0x36, 0xf6, 0xda, 0xfb, 0xa3, 0xc3, 0xf1, 0x7d, 0xd7, 0x11, 0x64, 0x05, 0x23,
	0xcf, 0x63, 0x47, 0xb0, 0x9d, 0x62, 0x31, 0x2d, 0x12, 0x4c, 0xe2, 0x3a, 0xb9, 0x41, 0xcb, 0x2a,
	0xdc, 0xf0, 0x0a, 0xcf, 0x3c, 0xff, 0xb5, 0x67, 0x47, 0x5b, 0xe9, 0x15, 0x84, 0xdd, 0x80, 0x3e,
	0x2a, 0x15, 0xe7, 0x3a, 0xf5, 0xbd, 0xd0, 0x43, 0xa5, 0x9e, 0xeb, 0x34, 0xfc, 0x75, 0x03, 0xb6,
	0xae, 0xea, 0xb3, 0xcf, 0xe0, 0x9a, 0xbf, 0x41, 0xc5, 0xda, 0x70, 0x53, 0x69, 0xdf, 0x79, 0x9b,
	0x35, 0x7c, 0x6a, 0x51, 0x0a, 0x9f, 0x7a, 0x46, 0xf0, 0x2c, 0xce, 0xb9, 0x99, 0xce, 0x6c, 0x0f,
	0x0e, 0xa2, 0xb1, 0x07, 0x9f, 0x13, 0xc6, 0x6e, 0xc2, 0xa0, 0xcc, 0xf8, 0x14, 0x63, 0x91, 0x78,
	0xe3, 0x7d, 0x4b, 0x1f, 0x27, 0x54, 0x4d, 0x73, 0x59, 0xa2, 0x0e, 0x3a, 0xae, 0xfe, 0x96, 0x08,
	0xff, 0x6a, 0xc1, 0xe6, 0x2b, 0x97, 0xf1, 0x23, 0x34, 0x5c, 0x64, 0x9a, 0x7d, 0xb9, 0xe8, 0x46,
	0x6d, 0x8a, 0xd2, 0xba, 0x33, 0x3a, 0x64, 0x3e, 0x01, 0x5e, 0xf8, 0xd4, 0x14, 0x65, 0xd3, 0xa1,
	0x44, 0xb0, 0xaf, 0x96, 0x7b, 0xdd, 0x2a, 0xb6, 0xde, 0xa9, 0xb8, 0xe8, 0x7f, 0xab, 0x7a, 0xb5,
	0xff, 0xc9, 0xf3, 0xf6, 0x6a, 0xff, 0xaf, 0xff, 0x92, 0xda, 0x57, 0xbf, 0xa4, 0x5d, 0x18, 0xcc,
	0x90, 0x27, 0x5a, 0xa4, 0xd2, 0x7f, 0x45, 0x0d, 0xcd, 0x02, 0xe8, 0xd3, 0xf9, 0x82, 0x5f, 0x06,
	0x3d, 0xab, 0x5b, 0x93, 0x94, 0x35, 0x59, 0xe5, 0xce, 0x69, 0xfa, 0x74, 0x26, 0x51, 0x5f, 0x56,
	0xb9, 0x75, 0xed, 0x53, 0xe8, 0x64, 0x42, 0x62, 0x30, 0x58, 0x17, 0xcb, 0x89, 0x90, 0x18, 0x59,
	0x7e, 0xf8, 0x4b, 0x0b, 0x46, 0x4b, 0x28, 0x4d, 0x03, 0xc9, 0x73, 0xf4, 0xb5, 0xb4, 0x67, 0xf6,
	0x11, 0x80, 0x9e, 0x15, 0xca, 0xc4, 0x96, 0xe3, 0x46, 0xc8, 0xd0, 0x22, 0x2f, 0x88, 0xbd, 0x03,
	0xdd, 0x69, 0x91, 0x15, 0xca, 0x17, 0xce, 0x11, 0xec, 0x01, 0x0c, 0x78, 0x8a, 0x72, 0x2a, 0x7c,
	0xe5, 0x46, 0x87, 0x3b, 0xab, 0x4e, 0x3c, 0x26, 0xee, 0x65, 0xd4, 0x48, 0xb1, 0x2d, 0x68, 0x57,
	0x2a, 0xf3, 0xe1, 0xd3, 0x91, 0x9c, 0x11, 0xd3, 0x42, 0xda, 0xb0, 0x87, 0x91, 0x3d, 0x93, 0x33,
	0x06, 0xdf, 0x98, 0xd8, 0x99, 0xec, 0x3b, 0x67, 0x08, 0x79, 0x6a, 0xcd, 0x3e, 0x84, 0xfe, 0x1c,
	0x67, 0x62, 0x9a, 0xd5, 0xa1, 0xdf, 0x7c, 0x3b, 0xf4, 0x1f, 0x9c, 0x40, 0x54, 0x4b, 0x86, 0x2f,
	0x80, 0xbd, 0xcd, 0x5e, 0x9b, 0x0a, 0x06, 0x1d, 0xea, 0x3f, 0x9f, 0x04, 0x7b, 0xae, 0xfd, 0x6e,
	0x37, 0x7e, 0x87, 0xdf, 0xc1, 0x64, 0x25, 0xc8, 0xb5, 0x57, 0x79, 0xb5, 0xd6, 0x22, 0xdc, 0x1d,
	0xe8, 0x96, 0xb3, 0x42, 0xd6, 0xa3, 0xd8, 0x11, 0xe1, 0x49, 0x53, 0x20, 0x5b, 0xd8, 0xcf, 0x61,
	0x90, 0x15, 0x53, 0x37, 0xcd, 0x5d, 0x87, 0x4f, 0x7c, 0x84, 0x27, 0xdc, 0x9c, 0xc8, 0x34, 0x6a,
	0xd8, 0x8d, 0xd5, 0xd6, 0xc2, 0x6a, 0xf8, 0x67, 0x0b, 0xba, 0x76, 0x78, 0x50, 0x5b, 0xe9, 0x2a,
	0xcf, 0xb9, 0xba, 0xf4, 0x6e, 0xd5, 0x24, 0xbb, 0x05, 0x9d, 0x0c, 0x53, 0xed, 0x27, 0x08, 0xd4,
	0xd7, 0x63, 0x1a, 0x59, 0x9c, 0x7a, 0xfa, 0x82, 0x0b, 0x3b, 0x06, 0xe2, 0x42, 0x25, 0x48, 0x95,
	0x6f, 0xef, 0x77, 0xa3, 0x49, 0x8d, 0x7e, 0x4f, 0x20, 0x7b, 0x04, 0xdb, 0xc5, 0x1c, 0xd5, 0x5c,
	0xe0, 0x45, 0x5c, 0x16, 0xd9, 0xa5, 0xed, 0xc7, 0x8e, 0x75, 0xf9, 0x9a, 0xbf, 0xf3, 0xa5, 0x87,
	0xa3, 0xad, 0x5a, 0xb2, 0x46, 0xd8, 0x01, 0xf4, 0xce, 0x8a, 0x4a, 0x26, 0xda, 0x36, 0xc4, 0xe8,
	0xf0, 0xff, 0x2b, 0x51, 0x3e, 0xb1, 0xac, 0xc8, 0x8b, 0xb0, 0x5b, 0x00, 0xd3, 0xa2, 0xbc, 0x54,
	0x22, 0x9d, 0xd9, 0x67, 0x86, 0xc2, 0x59, 0x42, 0xe8, 0xf3, 0xba, 0xe0, 0x4a, 0x0a, 0x99, 0xd2,
	0x1b, 0x43, 0x63, 0xa4, 0xa1, 0xd9, 0x6d, 0xe8, 0x9c, 0x73, 0x55, 0xb7, 0xcb, 0xc8, 0x9b, 0xf9,
	0x96, 0x2b, 0x8c, 0x2c, 0x23, 0xfc, 0x09, 0xc6, 0xcb, 0x46, 0xd9, 0x3d, 0x00, 0x59, 0x28, 0x33,
	0x8b, 0x91, 0x6b, 0xb3, 0xbe, 0x06, 0x43, 0x2b, 0xf0, 0x0d, 0xd7, 0x86, 0xa4, 0x75, 0x51, 0x99,
	0x59, 0x7c, 0x81, 0xda, 0xf8, 0xd1, 0x72, 0x55, 0xda, 0x0a, 0xbc, 0x46, 0x6d, 0xc2, 0x7b, 0xd0,
	0x73, 0x20, 0xb5, 0x47, 0xc6, 0xdd, 0xf5, 0xad, 0x88, 0x8e, 0x16, 0x91, 0xa9, 0xbd, 0x82, 0x10,
	0x99, 0x86, 0x21, 0x0c, 0x9a, 0x7c, 0x5d, 0x87, 0xde, 0x4b, 0xf7, 0xca, 0xfa, 0x05, 0xc0, 0x51,
	0xe1, 0x09, 0x74, 0x28, 0x16, 0x4a, 0xc1, 0xb4, 0x52, 0xf4, 0x22, 0xd5, 0xf5, 0x6e, 0x68, 0x6a,
	0xbc, 0x39, 0xcf, 0x2a, 0xf4, 0x77, 0x3b, 0xc2, 0xf6, 0x3a, 0xbe, 0x31, 0xf5, 0x62, 0x40, 0xe7,
	0xf0, 0x8f, 0x36, 0xb4, 0x4f, 0x30, 0x65, 0x77, 0xa0, 0xab, 0x0d, 0x96, 0xf5, 0xb3, 0x54, 0x67,
	0xed, 0xd4, 0x60, 0x19, 0x39, 0x0e, 0x3b, 0x80, 0x41, 0x22, 0xb4, 0xe1, 0xf4, 0x44, 0xb6, 0x56,
	0xaa, 0x7e, 0xe4, 0xe1, 0xa8, 0x11, 0x20, 0xef, 0x92, 0x4a, 0xb9, 0xae, 0x76, 0x53, 0xb4, 0xa1,
	0xd9, 0x03, 0xd8, 0xa1, 0xb3, 0x7d, 0x19, 0x63, 0x21, 0x63, 0xff, 0x6e, 0xfa, 0x41, 0xca, 0x1a,
	0xde, 0xb1, 0x7c, 0xe5, 0x38, 0x6b, 0xf7, 0x92, 0xf7, 0xce, 0xe5, 0xde, 0xba, 0xb9, 0xfc, 0x05,
	0x6c, 0x6a, 0xc3, 0x95, 0x89, 0x9b, 0x6f, 0xae, 0xbf, 0xae, 0x82, 0x13, 0x2b, 0x74, 0x52, 0x7f,
	0x78, 0x0f, 0x60, 0x8c, 0x32, 0x59, 0xe8, 0x0c, 0xd6, 0xe9, 0x8c, 0x50, 0x26, 0x8d, 0xc6, 0x5d,
	0x70, 0x57, 0xc4, 0x3c, 0x49, 0x14, 0x6a, 0xed, 0x77, 0x9a, 0xb1, 0x05, 0x1f, 0x3b, 0x8c, 0xdd,
	0x06, 0xd2, 0x69, 0x44, 0xdc, 0x76, 0x03, 0x28, 0x13, 0x2f, 0x10, 0x1e, 0xc3, 0xa0, 0xce, 0x2d,
	0x05, 0x38, 0xab, 0x72, 0x2e, 0x63, 0x85, 0x3c, 0xe1, 0x67, 0x59, 0x3d, 0x7c, 0x26, 0x16, 0x8d,
	0x3c, 0x48, 0x6d, 0x93, 0xa3, 0x41, 0xa5, 0x6d, 0x8d, 0xda, 0x91, 0xa7, 0xc2, 0xdf, 0xda, 0xd0,
	0xa1, 0x6a, 0xb2, 0x03, 0xd8, 0x9e, 0x99, 0x3c, 0x8b, 0x85, 0xd4, 0x46, 0x55, 0x6e, 0x3d, 0xf1,
	0x57, 0x6d, 0x11, 0xe3, 0x78, 0x09, 0xff, 0xef, 0x6a, 0xfe, 0x76, 0xde, 0x3b, 0xff, 0x22, 0xef,
	0xdd, 0xf7, 0xe6, 0xfd, 0x00, 0x06, 0xcd, 0x68, 0xea, 0xad, 0x1f, 0x4d, 0x8d, 0xc0, 0xa2, 0xe9,
	0xfb, 0xef, 0x6c, 0xfa, 0xaf, 0xe1, 0x5a, 0xbd, 0x29, 0x26, 0x6e, 0x2d, 0xf1, 0xc5, 0xff, 0x60,
	0xf5, 0x19, 0xf2, 0x3b, 0x4b, 0xb4, 0x69, 0x56, 0x77, 0x98, 0xdb, 0x40, 0x8b, 0xe7, 0x1c, 0x33,
	0xb7, 0x8b, 0xba, 0x2e, 0x00, 0x07, 0xd1, 0xa2, 0x78, 0x78, 0x0a, 0xe3, 0x67, 0x74, 0xd1, 0x29,
	0x8d, 0xcb, 0x29, 0xb2, 0xa7, 0x00, 0x8b, 0xb5, 0x91, 0x05, 0x4d, 0xb6, 0xaf, 0xfc, 0x1f, 0xec,
	0xde, 0x5c, 0xc3, 0x71, 0x3b, 0x66, 0xf8, 0xbf, 0x27, 0xc3, 0x1f, 0xfb, 0x96, 0x5b, 0x9e, 0x9d,
	0xf5, 0xec, 0xbf, 0xc6, 0xc3, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x33, 0xbb, 0x66, 0xb6, 0x7a,
	0x0c, 0x00, 0x00,
}
